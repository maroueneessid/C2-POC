// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto_defs/manager/manager.proto

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	common "simpleGRPC/proto_defs/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManagerAsset_SendOrder_FullMethodName        = "/ManagerAsset/SendOrder"
	ManagerAsset_CheckSession_FullMethodName     = "/ManagerAsset/CheckSession"
	ManagerAsset_GetHistory_FullMethodName       = "/ManagerAsset/GetHistory"
	ManagerAsset_Subscribe_FullMethodName        = "/ManagerAsset/Subscribe"
	ManagerAsset_StartNewListener_FullMethodName = "/ManagerAsset/StartNewListener"
	ManagerAsset_KillListener_FullMethodName     = "/ManagerAsset/KillListener"
)

// ManagerAssetClient is the client API for ManagerAsset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerAssetClient interface {
	SendOrder(ctx context.Context, in *common.ServerOrder, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckSession(ctx context.Context, in *common.None, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.Session], error)
	GetHistory(ctx context.Context, in *HistoryQuery, opts ...grpc.CallOption) (*HistoryQuery, error)
	Subscribe(ctx context.Context, in *Notification, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Notification], error)
	StartNewListener(ctx context.Context, in *Listener, opts ...grpc.CallOption) (*emptypb.Empty, error)
	KillListener(ctx context.Context, in *Listener, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type managerAssetClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerAssetClient(cc grpc.ClientConnInterface) ManagerAssetClient {
	return &managerAssetClient{cc}
}

func (c *managerAssetClient) SendOrder(ctx context.Context, in *common.ServerOrder, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagerAsset_SendOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAssetClient) CheckSession(ctx context.Context, in *common.None, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.Session], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ManagerAsset_ServiceDesc.Streams[0], ManagerAsset_CheckSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.None, common.Session]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ManagerAsset_CheckSessionClient = grpc.ServerStreamingClient[common.Session]

func (c *managerAssetClient) GetHistory(ctx context.Context, in *HistoryQuery, opts ...grpc.CallOption) (*HistoryQuery, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryQuery)
	err := c.cc.Invoke(ctx, ManagerAsset_GetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAssetClient) Subscribe(ctx context.Context, in *Notification, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Notification], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ManagerAsset_ServiceDesc.Streams[1], ManagerAsset_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Notification, Notification]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ManagerAsset_SubscribeClient = grpc.ServerStreamingClient[Notification]

func (c *managerAssetClient) StartNewListener(ctx context.Context, in *Listener, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagerAsset_StartNewListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAssetClient) KillListener(ctx context.Context, in *Listener, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagerAsset_KillListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerAssetServer is the server API for ManagerAsset service.
// All implementations must embed UnimplementedManagerAssetServer
// for forward compatibility.
type ManagerAssetServer interface {
	SendOrder(context.Context, *common.ServerOrder) (*emptypb.Empty, error)
	CheckSession(*common.None, grpc.ServerStreamingServer[common.Session]) error
	GetHistory(context.Context, *HistoryQuery) (*HistoryQuery, error)
	Subscribe(*Notification, grpc.ServerStreamingServer[Notification]) error
	StartNewListener(context.Context, *Listener) (*emptypb.Empty, error)
	KillListener(context.Context, *Listener) (*emptypb.Empty, error)
	mustEmbedUnimplementedManagerAssetServer()
}

// UnimplementedManagerAssetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagerAssetServer struct{}

func (UnimplementedManagerAssetServer) SendOrder(context.Context, *common.ServerOrder) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrder not implemented")
}
func (UnimplementedManagerAssetServer) CheckSession(*common.None, grpc.ServerStreamingServer[common.Session]) error {
	return status.Errorf(codes.Unimplemented, "method CheckSession not implemented")
}
func (UnimplementedManagerAssetServer) GetHistory(context.Context, *HistoryQuery) (*HistoryQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedManagerAssetServer) Subscribe(*Notification, grpc.ServerStreamingServer[Notification]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedManagerAssetServer) StartNewListener(context.Context, *Listener) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewListener not implemented")
}
func (UnimplementedManagerAssetServer) KillListener(context.Context, *Listener) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillListener not implemented")
}
func (UnimplementedManagerAssetServer) mustEmbedUnimplementedManagerAssetServer() {}
func (UnimplementedManagerAssetServer) testEmbeddedByValue()                      {}

// UnsafeManagerAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerAssetServer will
// result in compilation errors.
type UnsafeManagerAssetServer interface {
	mustEmbedUnimplementedManagerAssetServer()
}

func RegisterManagerAssetServer(s grpc.ServiceRegistrar, srv ManagerAssetServer) {
	// If the following call pancis, it indicates UnimplementedManagerAssetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManagerAsset_ServiceDesc, srv)
}

func _ManagerAsset_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ServerOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAssetServer).SendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAsset_SendOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAssetServer).SendOrder(ctx, req.(*common.ServerOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAsset_CheckSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.None)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerAssetServer).CheckSession(m, &grpc.GenericServerStream[common.None, common.Session]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ManagerAsset_CheckSessionServer = grpc.ServerStreamingServer[common.Session]

func _ManagerAsset_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAssetServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAsset_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAssetServer).GetHistory(ctx, req.(*HistoryQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAsset_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Notification)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerAssetServer).Subscribe(m, &grpc.GenericServerStream[Notification, Notification]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ManagerAsset_SubscribeServer = grpc.ServerStreamingServer[Notification]

func _ManagerAsset_StartNewListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Listener)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAssetServer).StartNewListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAsset_StartNewListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAssetServer).StartNewListener(ctx, req.(*Listener))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAsset_KillListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Listener)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAssetServer).KillListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerAsset_KillListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAssetServer).KillListener(ctx, req.(*Listener))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerAsset_ServiceDesc is the grpc.ServiceDesc for ManagerAsset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerAsset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerAsset",
	HandlerType: (*ManagerAssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrder",
			Handler:    _ManagerAsset_SendOrder_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _ManagerAsset_GetHistory_Handler,
		},
		{
			MethodName: "StartNewListener",
			Handler:    _ManagerAsset_StartNewListener_Handler,
		},
		{
			MethodName: "KillListener",
			Handler:    _ManagerAsset_KillListener_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckSession",
			Handler:       _ManagerAsset_CheckSession_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ManagerAsset_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto_defs/manager/manager.proto",
}
